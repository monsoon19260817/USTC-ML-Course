import numpy as np
import scipy.io as scio
import matplotlib.pyplot as plt
import time

mat = scio.loadmat('hw2.mat')
X: np.ndarray = mat['X'].toarray()
y: np.ndarray = mat['y']
n, d = X.shape
# print(X.dtype, X)
# print(y.dtype, y)
# print(n, d)

# print('\n========== solution 4.1 归一化 ==========\n')
max = X.max(axis=0).reshape((1, d))
min = X.min(axis=0).reshape((1, d))
# 计算归一化
X = (X - min) / (max - min)
X_bar: np.ndarray = np.hstack((np.ones((n, 1)), X))
# 定义 f(x)
f = lambda w: 1 / n * (np.linalg.norm(y - X_bar @ w, ord=2) ** 2)

print('\n========== solution 4.2 线性回归法 ==========\n')

start1 = time.time()
# 用公式计算线性回归解
w0_star: np.ndarray = np.linalg.inv(X_bar.T @ X_bar) @ X_bar.T @ y
end1 = time.time()
f0_star = f(w0_star)
print('w0* =\n%s\n\nf(w0*) = %f' % (w0_star, f0_star))

print('\n========== solution 4.3 梯度下降法 ==========\n')

step = 0.6  # 步长
f_list = []

start2 = time.time()
k = 1
w_k = np.full(shape=w0_star.shape, fill_value=0, dtype=np.float64)  # 初始设为0
f_k = f(w_k)
f_list.append(f_k)
loss = abs(f_k - f0_star)

# 提取前因子减少循环计算量
tmp = step * (-2 / n) * X_bar.T
tmp1 = tmp @ y
tmp2 = tmp @ X_bar
delta = lambda w: tmp1 - tmp2 @ w

print('\tk = %d\tloss = %f' % (k, loss))
while loss >= 0.1:
    k += 1
    # \nabla f(w) = (-2 / n) * X_bar.T @ (y - X_bar @ w)
    # w_k -= step * (-2 / n) * X_bar.T @ (y - X_bar @ w_k)  # 原始计算式
    # w_k -= tmp @ (y - X_bar @ w_k)  # 改进版 1
    w_k -= delta(w_k)  # 提取前因子减少循环计算量
    f_k = f(w_k)
    f_list.append(f_k)  # 记录
    loss = abs(f_k - f0_star)  # 计算 loss
    if k % 100 == 0:
        print('\tk = %d\tloss = %f' % (k, loss))

end2 = time.time()
print('\n===== answer =====')
print('k = %d\tloss = %f\n\nwk* =\n%s\n\nf(wk*) = %f' % (k, loss, w_k, f(w_k)))

print('\n========== 用时比较 ==========\n')
print('\t线性回归法用时：%f s' % (end1 - start1))
print('\t梯度下降法用时：%f s' % (end2 - start2))

print('\n========== 保存结果 ==========\n')
print('w0* 保存到文件 solution.mat, 名称为 w0_star')
print('wk* 保存到文件 solution.mat, 名称为 wk_star')
scio.savemat('solution.mat', {'w0_star': w0_star, 'wk_star': w_k})

print('\n========== 绘图 ==========\n')
axis_x = range(1, len(f_list) + 1)
plt.scatter(axis_x, f_list, s=0.1, color='r', label='f(wk) generated by gradient descent')
plt.plot(axis_x, [f0_star for _ in axis_x], color='g', label='f(w0*) by linear regression')
plt.xlabel('k')
plt.ylabel('f(wk)')
plt.legend(loc='best')
plt.title('k - f(wk) relation chart')
plt.savefig('plot4.3.png', dpi=400)

print('图片保存到 plot4.3.png')
